package IPLLauncherDB;


import java.sql.*;
import java.util.*;

public class IPLPostgreLauncher {

    private final static String url="jdbc:postgresql://localhost:5432/IPLProject";
    private final static String userName="postgres";
    private final static String password="yourPassword";

    public static void main(String[] args) {
        getMatchesPerYear();
        getMatchesWonPerTeam();
        getExtraRunsIn2016PerTeam();
        getSixesPerTeam2016();
        getTopEconomicBowlers2015();
    }

    private static void getTopEconomicBowlers2015() {
        PreparedStatement st;
        ResultSet rs;
        HashMap<String,Float> topTenBowlersEconomy2015= new HashMap<>();
        try(Connection con= DriverManager.getConnection(url,userName,password)){
            st = con.prepareStatement("select bowler,CAST(sum(total_runs)-sum(legbye_runs)-sum(bye_runs) AS    FLOAT)*6/(count(*)-sum(wide_runs)-sum(noball_runs)) as economy\n" +
                    "from Public.\"Deliveries\" \n" +
                    "where match_id between 518 and 576\n" +
                    "group by bowler\n" +
                    "order by economy\n" +
                    "LIMIT 10;\n");
            rs = st.executeQuery();
            while (rs.next()) {
                String bowler = rs.getString("bowler");
                float economy=rs.getInt("economy");
                topTenBowlersEconomy2015.put(bowler,economy);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        System.out.println("\nTop 10 Bowler Economies of 2015\n----------------");
        for(Map.Entry<String,Float> entry: topTenBowlersEconomy2015.entrySet())
        {
            System.out.println(entry.getKey()+": "+entry.getValue());
        }
    }

    private static void getSixesPerTeam2016() {
        PreparedStatement st;
        ResultSet rs;
        HashMap<String,Integer> sixesPerTeam2016 = new HashMap<>();
        try(Connection con= DriverManager.getConnection(url,userName,password)){
            st = con.prepareStatement("select batting_team,count(*) as sixes\n" +
                                            "from Public.\"Deliveries\"\n" +
                              "where (match_id between 577 and 637) and total_runs=6\n" +
                                            "group by batting_team\n");
            rs = st.executeQuery();
            while (rs.next()) {
                String team = rs.getString("batting_team");
                int sixes_count=rs.getInt("sixes");
                sixesPerTeam2016.put(team,sixes_count);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        System.out.println("\nSixes per team in 2016\n----------------");
        for(Map.Entry<String,Integer> entry: sixesPerTeam2016.entrySet())
        {
            System.out.println(entry.getKey()+": "+entry.getValue());
        }
    }

    private static void getExtraRunsIn2016PerTeam() {
        PreparedStatement st;
        ResultSet rs;
        HashMap<String,Integer> extraRuns2016 = new HashMap<>();
        try(Connection con= DriverManager.getConnection(url,userName,password)){
            st = con.prepareStatement("select bowling_team,sum(extra_runs) as extras\n" +
                                           "from Public.\"Deliveries\"\n" +
                                            "where match_id between 577 and 637 \n" +
                                             "group by bowling_team;\n");
            rs = st.executeQuery();
            while (rs.next()) {
                String team = rs.getString("bowling_team");
                int extras=rs.getInt("extras");
                extraRuns2016.put(team,extras);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        System.out.println("\nExtra runs per team in 2016\n----------------");
        for(Map.Entry<String,Integer> entry: extraRuns2016.entrySet())
        {
            System.out.println(entry.getKey()+": "+entry.getValue());
        }
    }

    private static void getMatchesWonPerTeam() {
        PreparedStatement st;
        ResultSet rs;
        TreeMap<String,Integer> matchesWonPerYear = new TreeMap<>();
        try(Connection con= DriverManager.getConnection(url,userName,password)){
            st = con.prepareStatement("select COALESCE(winner,'Tied') as winner,count(*) as matches_count\n" +
                                            "from Public.\"Matches\"\n" +
                                            "group by winner;\n");
            rs = st.executeQuery();
            while (rs.next()) {
                String team = rs.getString("winner");
                int matchesCount=rs.getInt("matches_count");
                matchesWonPerYear.put(team,matchesCount);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        System.out.println("\nMatches Won Per team\n----------------");
        for(Map.Entry<String,Integer> entry: matchesWonPerYear.entrySet())
        {
            System.out.println(entry.getKey()+": "+entry.getValue());
        }
    }

    private static void getMatchesPerYear() {

        PreparedStatement st;
        ResultSet rs;
        TreeMap<Integer,Integer> matchesPerYear = new TreeMap<>();
        try(Connection con= DriverManager.getConnection(url,userName,password)){
            st = con.prepareStatement("select season,count(*) as total_matches\n" +
                                                "from Public.\"Matches\"\n" +
                                                "group by season\n" +
                                                "order by season");
            rs = st.executeQuery();
            while (rs.next()) {
                int season = rs.getInt("season");
                int total_matches=rs.getInt("total_matches");
                matchesPerYear.put(season,total_matches);
            }

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        System.out.println("\nMatches per Year\n----------------");
        for(Map.Entry<Integer,Integer> entry: matchesPerYear.entrySet())
        {
            System.out.println(entry.getKey()+": "+entry.getValue());
        }
    }
}
